Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.

Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

class Solution {
    public int reverse(int x) {
        
        int res = 0;
        while(x != 0){
            int boop = x % 10;
            x /= 10;
            
            if(res > Integer.MAX_VALUE / 10 || res == Integer.MAX_VALUE /10 && boop > 7){
                return 0;
            }
            
            if(res < Integer.MIN_VALUE /10 || res == Integer.MIN_VALUE /10 && boop < -8){
                return 0;
            }
            
            res = res * 10 + boop;
        }
        
        return res;
    }
}

Since you can use x % 10 to get the smallest digit of x, simply do this and add the digits one by one to the result.

Everytime, check if the resulting integer would go beyond the bounds of the Integer variable. Return res when done.

Runtime 1ms faster than 100.00%
Memory Usage 35.8 MB less than 91.16%