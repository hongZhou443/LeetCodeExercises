You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode res = new ListNode(l1.val + l2.val);
        
        ListNode current = res;
        ListNode p1 = l1.next;
        ListNode p2 = l2.next;
        
        boolean hasCarryOver = current.val >= 10;
        
        while(p1 != null || p2 != null){
            if(p1 == null){
                current.next = new ListNode(p2.val);
                p2 = p2.next;
            } else if(p2 == null){
                current.next = new ListNode(p1.val);
                p1 = p1.next;
            } else{
                current.next = new ListNode(p1.val + p2.val);
                p1 = p1.next;
                p2 = p2.next;
            }
            
            if(hasCarryOver){
                current.next.val += 1;
                current.val -= 10;
            }
            
            hasCarryOver = current.next.val >= 10;
            current = current.next;
        }
        if(hasCarryOver){
            current.next = new ListNode(1);
            current.val -= 10;
        }
        return res;
    }
}

Add the first digits, then check if resulting sum is greater than of equal to 10. If so, when adding the next digit values, add the one. Then, check  if the resulting sum is greater than or equal to 10. Do this for every following pair/digit.

Runtime 2ms faster than 77.50%
Memory Usage 39.7 MB less than 22.41%