Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).

The algorithm for myAtoi(string s) is as follows:

Read in and ignore any leading whitespace.
Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.
Read in next the characters until the next non-digit charcter or the end of the input is reached. The rest of the string is ignored.
Convert these digits into an integer (i.e. "123" -> 123, "0032" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).
If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.
Return the integer as the final result.
Note:

Only the space character ' ' is considered a whitespace character.
Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.

class Solution {
    public int myAtoi(String s) {
        
        if(s.length() == 0 || s == null || s.equals(" ")){
            return 0;
        }
        
        int res = 0;
        int index = 0;
        boolean isNegative = false;
        
        // Checks for white space
        while(index < s.length()){
            if(s.substring(index, index+1).equals(" ")){
                index ++;
            } else{
                break;
            }
        }
        
        // Checks for sign
        if(index < s.length() && s.substring(index, index+1).equals("+")){
            isNegative = false;
            index ++;
        } else if(index < s.length() && s.substring(index, index+1).equals("-")){
            isNegative = true;
            index ++;
        }
        
        
        // Add digit until encounters non digit
        
        while(index < s.length() && Character.isDigit(s.charAt(index))){
            
            if(res > Integer.MAX_VALUE / 10 || res == Integer.MAX_VALUE / 10 && s.charAt(index) - '0' > 7){
                return isNegative ? Integer.MIN_VALUE : Integer.MAX_VALUE;
            } 
            
            res = res * 10 + s.charAt(index) - '0';
            index ++;
        }
        
        return res * (isNegative ? -1 : 1);
    }
}

Basic string traversal. First check for any leading whitespace. Then, check for the optional sign. Lastly, parse each individual character at a time until you exceed the range of Integer, the end of the string, or a non-digit character.

Runtime 2ms faster than 62.43%
Memory Usage 39.4 MB less than 26.05%